# -*- coding: utf-8 -*-import jsonimport arcpyclass Toolbox(object):    def __init__(self):        """OZ Map Toolbox includes tools to update and maintain PDF files that are part of the Snohomish County           Planning and Development Services OZ Map series."""        self.label = "OZ Map Toolbox"        self.alias = "OZ Map Toolbox"        # List of tool classes associated with this toolbox        self.tools = [RefreshMapSeriesTool, ExportMapSeriesTool]class RefreshMapSeriesTool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "1 - Refresh OZ Map Series"        self.description = "Refreshes the map series within ArcGIS Pro, either for a whole township, all sections " \                           "within the township, or a subset of sections."        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(            displayName="Township",            name="in_township",            datatype="GPString",            parameterType="Required",            direction="Input")        param0.filter.type = "ValueList"        param0.filter.list = ["27", "28", "29", "30", "31", "32"]        param1 = arcpy.Parameter(            displayName="Range",            name="in_range",            datatype="GPString",            parameterType="Required",            direction="Input")        param1.filter.type = "ValueList"        param1.filter.list = ["3", "4", "5", "6", "7", "8", "9", "10", "11"]        param2 = arcpy.Parameter(            displayName="Refresh a subset of sections?",            name="section_subset",            datatype="GPBoolean",            parameterType="Optional",            direction="Input")        param2.value = False        param3 = arcpy.Parameter(            displayName="Select individual sections using OZ sequence numbers (ex: 27, 28, 29)",            name="oz_seq_string",            datatype="GPString",            parameterType="Optional",            direction="Input",            enabled=False)        params = [param0, param1, param2, param3]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, params):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        if params[2].value == True:            params[3].enabled = True        else:            params[3].enabled = False        return    def updateMessages(self, params):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        if not params[3].value:            params[3].setWarningMessage("If the previous checkbox is checked, you must provide OZ sequence numbers!")        return    def execute(self, params, messages):        """The source code of the tool."""        # Local variables        twp_list = parse_twp_json()        ozseq_str = params[3].valueAsText        ozseq = clean_string(ozseq_str)        active_map = "CURRENT"        # Choose which layout to use        if params[2].value:  # Refresh subset of sections = True            lyr, layout, ms = get_pro_project_params(active_map, "Section_MapSeries_OZmap")        else:  # Refresh subset of sections = False            lyr, layout, ms = get_pro_project_params(active_map, "FULL_TWP_MapSeries_OZmap")        # Refresh the map series        set_def_query(params, lyr, twp_list, ozseq)        ms.refresh()        set_color_text_elem(layout, ms)        arcpy.AddMessage("Zoning APRX layout and map series refreshed successfully!")        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass ExportMapSeriesTool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "2 - Export OZ Map Series"        self.description = r"Exports each map in the current map series to PDF files, to both current and archive" \                           r"directories on the \\snoco\gis\plng file server."        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = None        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return# helper functionsdef clean_string(list_as_string):    if list_as_string is not None:        return list_as_string.replace(" ", "")    else:        arcpy.AddMessage("No OZ sequence number provided...")        returndef parse_twp_json():    with open(r"..\bin\twp_list.json", 'r') as f:        twp_list = json.load(f)    return twp_listdef get_pro_project_params(project_name, layout_name):    aprx = arcpy.mp.ArcGISProject(project_name)    map = aprx.listMaps("Premier Data Frame")[0]    lyr = map.listLayers(".PageGrid_MASTERPageGrid")[0]    layout = aprx.listLayouts(layout_name)[0]    ms = layout.mapSeries    return lyr, layout, msdef set_def_query(params, lyr, twp_list, ozseq_list=""):    # Set local variables    twp_rng = f"{params[0].valueAsText}-{params[1].valueAsText}"    dq_old = lyr.definitionQuery    dq_new = dq_old    if not params[2].value and twp_rng in twp_list:        arcpy.AddMessage("Refreshing the township only...")        dq_new = f"[TOWNSHIP] = {params[0].valueAsText} AND [RANGE] = {params[1].valueAsTExt} AND [QSLABEL] = 'TWP'"    elif not params[2].value and twp_rng not in twp_list:        arcpy.AddMessage("Refreshing all sections in the township...")        dq_new = f"[TOWNSHIP] = {params[0].valueAsText} AND [RANGE] = {params[1].valueAsText} AND [QSLABEL] = 'FULL'"    elif params[2].value and ozseq_list is not None:        arcpy.AddMessage("Refreshing a subset of sections based on user-supplied OZ sequence numbers...")        dq_new = f"[TOWNSHIP] = {params[0].valueAsText} AND [RANGE] = {params[1].valueAsText} AND [OZSEQNUM] IN ({ozseq_list})"    if dq_old != dq_new:        arcpy.AddMessage("Definition query to apply: " + dq_new)    else:        arcpy.AddWarning("Definition query was not changed!")    if lyr.supports("DEFINITIONQUERY"):        update_definition_query(lyr, dq_new)    returndef update_definition_query(layer, sql):    layer.updateDefinitionQueries(        [            {'name': 'Query 1', 'sql': sql, 'isActive': True}        ]    )    returndef set_color_text_elem(layout, map_series):    '''Set the color of the txtSEQColor element to match the particular def. qry. CMYK specs of .MasterPageGrid'''    # --Global variables    global cmyk    # --Current pageID    map_series.currentPageID = 1    # --Get SEQColor of current Page and construct new text to find & replace for Sequence Number    seq_label = map_series.pageRow.CMYK_SEQCOLOR    cmyk_List = seq_label.split(",")    c_clr = '"' + str(cmyk_List[0]) + '"'    m_clr = '"' + str(cmyk_List[1]) + '"'    y_clr = '"' + str(cmyk_List[2]) + '"'    b_clr = '"' + str(cmyk_List[3]) + '"'    arcpy.AddMessage("CMYK values: {0}, {1}, {2}, {3}".format(c_clr, m_clr, y_clr, b_clr))    # --Specifiy the layout element to change according to the txtSEQColor text element    textElem = layout.listElements("TEXT_ELEMENT", "txtSEQColor")    textElem[        0].text = '<CLR cyan = {0} magenta = {1} yellow = {2} black = {3}><dyn type="page" property="ozseqnum"/></CLR>' \        .format(c_clr, m_clr, y_clr, b_clr)    return